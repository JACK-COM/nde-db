import { Authenticator, User } from "@prisma/client";
import { DateTime } from "luxon";
import { Passport } from "passport";
import GoogleStrategy from "passport-google-oidc";
import { CtxUser } from "../graphql/context";
import { getUser, upsertUser } from "../services/users.service";

type PassportUser = {
  // The provider with which the user authenticated (facebook, twitter, etc.).
  provider: string & ("google" | "facebook" | "twitter");
  // A unique identifier for the user, as generated by the service provider.
  id: string;
  // The name of this user, suitable for display.
  displayName: string;
  // User's given name
  name: {
    // The family name of this user, or "last name" in most Western languages.
    familyName: string;
    // The given name of this user, or "first name" in most Western languages.
    givenName: string;
    // The middle name of this user.
    middleName: string;
  };
  // actual email address, type address (home, work, etc.).
  emails?: { value: string; type?: string }[];
  // The URL of the image.
  photos: string[];
};

const passport = new Passport();
const clientID = process.env.GOOGLE_CLIENT_ID;
const clientSecret = process.env.GOOGLE_CLIENT_SK;
const PORT = process.env.PORT;
const callbackURL = `http://localhost:${PORT}/oauth2/redirect/google`;
const toCtxUser = (u: User): CtxUser => ({
  id: u.id,
  role: u.role,
  lastSeen: DateTime.now().toJSDate()
});

// Configure Google sign-in strategy
passport.use(
  new GoogleStrategy(
    { clientID, clientSecret, callbackURL },
    async function verify(
      issuer: string,
      profile: PassportUser,
      cb: (e: Error | string | null, u?: CtxUser) => any
    ) {
      // Exit if no emails fetched
      if (!Array.isArray(profile.emails)) return cb(null, undefined);

      // Exit if user exists
      const [{ value: email }] = profile.emails;
      const exists = await getUser({ email });
      if (exists) {
        console.log({ exists });
        return cb(null, toCtxUser(exists));
      }

      const auth = getAuthIssuer(issuer);
      const newUser = await upsertUser({ email, auth });
      console.log({ newUser });
      return cb(null, toCtxUser(newUser));
    }
  )
);

// Serialize/deserialize user to persist session. Same function
// is reused because the user structure is set in `verify`
passport.serializeUser(_passportForwardUser);
passport.deserializeUser(_passportForwardUser);

export default passport;

/**
 * Get `Authenticator` value for auth issuer
 * @param issuer Issuer from `Passport` (e.g. `https://accounts.google.com`)
 * @returns `Authenticator` value for auth issuer
 */
function getAuthIssuer(issuer: string): Authenticator {
  if (issuer.includes("google")) return "google";
  if (issuer.includes("magic")) return "magic";
  return "other";
}

/**
 * Forward a user for serialize/deserialize operations
 * @param user Authenticated user
 * @param done Callback function
 */
function _passportForwardUser(user: Express.User, done: (...a: any[]) => any) {
  process.nextTick(function () {
    done(null, user);
  });
}
